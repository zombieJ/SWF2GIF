<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="600" height="300" minWidth="400" minHeight="300"
					   contentCreationComplete="contentCreated(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.graphics.codec.PNGEncoder;
			
			import org.bytearray.gif.encoder.GIFEncoder;
			import org.gif.encoder.GIFEncoder;
			
			import spark.events.TextOperationEvent;

			[Bindable]
			protected var strokeWidth:int = 0;

			protected var originalWidth:int;
			protected var originalHeight:int;
			protected var originalFrameRate:int;
			protected var originalTimes:int;		// Each frame takes millionSecond
			protected var originalOldVersion:Boolean = false;
			
			//protected var gif:org.gif.encoder.GIFEncoder;
			protected var gif:Object;
			protected var exportWidth:int;
			protected var exportHeight:int;
			protected var exportFrameRate:int;
			protected var exportTransColor:uint;
			protected var exportFile:File;
			protected var exportMovieClip:MovieClip;
			protected var exportTimes:int;
			protected var exportDate:Number;
			
			protected var exportTimesStack:int;		// Each frame will add originalTimes. if over exportTimes, record frame.
			
			protected function contentCreated(event:FlexEvent):void {
				refreshTitle();
				refreshGeneratable();
			}
			protected function refreshTitle(title:String = null):void {
				this.title = "SWf2GIF" + (title == null ? "" : " - " + title);
			}
			
			// Open swf file
			protected function btn_openSWF(event:MouseEvent):void {
				var file:File = new File();
				var swfFilter:FileFilter = new FileFilter("Flash", "*.swf");
				file.browseForOpen("Open SWF", [swfFilter]);
				file.addEventListener(Event.SELECT, fileSelectpd);
			}
			private function fileSelectpd(e:Event):void {
				var path:String = e.target.nativePath;
				txt_path.text = path;
				swf_cntr.source = path;
				refreshExportPath();
			}
			protected function txt_path_changeHandler(event:TextOperationEvent):void {
				swf_cntr.source = txt_path.text;
				refreshExportPath();
			}
			
			
			
			// Configue export path
			protected function btn_exportGIF(event:MouseEvent):void {
				var file:File = new File();
				file.browseForDirectory("Export Path");
				file.addEventListener(Event.SELECT, exportSelectpd);
			}
			private function exportSelectpd(e:Event):void {
				var path:String = e.target.nativePath;
				txt_path_out.text = path + File.separator;
				refreshExportPath();
			}
			protected function refreshExportPath(e:Event = null):void {
				var path:String = txt_path_out.text;
				var swf_path:String = txt_path.text;
				var fileName:String = "";
				
				// Auto attach file name
				if(path.length != 0 && path.charAt(path.length - 1) == File.separator) {
					try {
						var file:File = new File(swf_path);
						if(file.exists) fileName = file.name.replace(/\.swf/i, ".gif");
					} catch(error:Error) {}
					txt_path_out.text = path + fileName;
				}
				
				// Refresh Generate Button Enabled
				refreshGeneratable();
			}

			
			
			// swf loaded
			protected function swf_completeView(e:Event):void {
				var info:LoaderInfo = swf_cntr.content.loaderInfo;
				originalWidth = info.width;
				originalHeight = info.height;
				originalFrameRate = info.frameRate;
				originalTimes = 1000 / originalFrameRate;
				
				txt_width.text = originalWidth + "";
				txt_height.text = originalHeight + "";
				txt_fps.text = originalFrameRate + "";
				
				// Not support old version swf
				if (swf_cntr.content is AVM1Movie) {
					originalOldVersion = true;
					Alert.show("Dosen't support old version swf.", "Sorry!");
				} else {
					originalOldVersion = false;
				}
				
				// Refresh Generate Button Enabled
				refreshGeneratable();
			}
			protected function swf_completeExport(e:Event):void {
				var mc:MovieClip = swf_expoter.content as MovieClip;
				mc.gotoAndStop(1);
				resize();
				
				exportGIF();
			}
			// Adjust export swf loader size
			protected function resize(e:Event = null):void {
				var width:int = Number(txt_width.text);
				var height:int = Number(txt_height.text);

				swf_expoter.width = width;
				swf_expoter.height = height;
				
				var mc:MovieClip = swf_expoter.content as MovieClip;
				mc.scaleX = width / originalWidth;
				mc.scaleY = height / originalHeight;
			}
			
			
			
			// Export png
			protected function btn_generatePNG(event:MouseEvent):void {
				var pngEncoder:PNGEncoder = new PNGEncoder();
				var bitMapData:BitmapData = new BitmapData(swf_cntr.width, swf_cntr.height, true, 0x000000); 
				bitMapData.draw(swf_cntr);
				
				var imageByteArray:ByteArray = pngEncoder.encode(bitMapData);
				
				var file:File = new File(txt_path_out.text);
				var fs:FileStream = new FileStream();
				try {
					fs.open(file, FileMode.WRITE);
					fs.writeBytes(imageByteArray);
					fs.close();
					Alert.show("Export Done!");
				} catch(e:Error) {
					Alert.show(e.toString());
				}
			}
			
			protected function btn_generateGIF(event:MouseEvent):void {
				if(event.ctrlKey) {
					btn_generatePNG(event);
				} else {
					swf_expoter.source = txt_path.text;
				}
			}
			
			
			// Export gif
			protected function exportGIF():void {
				exportWidth = Number(txt_width.text);
				explicitHeight = Number(txt_height.text);
				exportFrameRate = Number(txt_fps.text);
				exportTransColor = uint(txt_transColor.text);
				
				exportFile = new File(txt_path_out.text);
				exportDate = (new Date()).time;
				exportTimes = 1000 / exportFrameRate;
				
				// Initail recorder
				gif = fastMode.selected ? new org.gif.encoder.GIFEncoder() : new org.bytearray.gif.encoder.GIFEncoder();
				gif.setFrameRate(exportFrameRate);
				gif.setTransparent(exportTransColor);
				gif.setQuality(quality.value);
				gif.setRepeat(0);
				
				// Start recording
				gif.start();

				exportMovieClip = swf_expoter.content as MovieClip;
				exportMovieClip.addEventListener(Event.ENTER_FRAME, drawGIF);
				exportMovieClip.gotoAndPlay(1);
				
				// Refresh Generate Button Enabled
				refreshGeneratable();
			}
			// Draw gif with snapshot
			protected function drawGIF(e:Event):void {
				var currentFrame:int = exportMovieClip.currentFrame;
				var totalFrame:int = exportMovieClip.totalFrames;
				
				// Generate bitmap of current frame
				var exportBitmap:BitmapData = new BitmapData(exportWidth, explicitHeight, true, exportTransColor);
				exportBitmap.fillRect(new Rectangle(0,0,exportWidth,explicitHeight), 0xFF000000 | exportTransColor);
				exportBitmap.draw(swf_expoter);

				// Add bitmap into scree
				exportTimesStack += originalTimes;
				while(exportTimesStack >= exportTimes) {
					exportTimesStack -= exportTimes;
					gif.addFrame(exportBitmap);
				}
				refreshTitle("Generate " + currentFrame + "/" + totalFrame +
				" [" + int(100.0 * currentFrame / totalFrame) + "%]");
				
				// Write gif file if finished
				if(currentFrame == totalFrame) {
					exportMovieClip.removeEventListener(Event.ENTER_FRAME, drawGIF);

					gif.finish();
					var fs:FileStream = new FileStream();
					try {
						fs.open(exportFile, FileMode.WRITE);
						fs.writeBytes(gif.stream, 0, gif.stream.length);
						fs.close();
						
						var ms:Number = (new Date()).time - exportDate;
						
						Alert.show("Export done. Export " + totalFrame +
							" frames. Cost " + int(ms / 1000) + " second.", "Export Done");
						refreshTitle();
					} catch(e:Error) {
						Alert.show(e.toString());
					}
					swf_expoter.source = null;
					gif = null;
					
					// Refresh Generate Button Enabled
					refreshGeneratable();
				}
			}
			
			protected function refreshGeneratable():void {
				var enable:Boolean = true;
				if(txt_path.text == "" || txt_path_out.text == "") enable = false;
				if(originalOldVersion) enable = false;
				if(swf_cntr.content as MovieClip == null) enable = false;
				if(gif != null) enable = false;
				
				btn_generate.enabled = enable;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Group width="100%" height="100%" fontFamily="Microsoft YaHei">
		<s:Group left="10" right="10" top="10">
			<s:Button width="94" label="Open SWF" click="btn_openSWF(event)"/>
			<s:TextInput id="txt_path" y="0" left="102" right="113" change="txt_path_changeHandler(event)" />
			<s:Button x="0" y="29" width="94" label="Export Path" click="btn_exportGIF(event)"/>
			<s:TextInput id="txt_path_out" y="28" left="102" right="113" change="refreshExportPath(event)" />
			
			<s:Button right="0" width="105" label="Export" visible="false" click="btn_generatePNG(event)"/>
			<s:Button id="btn_generate" right="0" top="0" bottom="0" width="105" label="Export"
					  click="btn_generateGIF(event)"/>
		</s:Group>
		<s:Group left="10" right="10" top="68" bottom="10">
			<s:Group left="0" right="202" top="0" bottom="0" clipAndEnableScrolling="true">
				<s:SWFLoader id="swf_cntr" height="100%" width="100%" complete="swf_completeView(event)">
					<s:filters>
						<s:GlowFilter color="0xFFFFFF" blurX="{strokeWidth}" blurY="{strokeWidth}" alpha="1" strength="255" />
					</s:filters>
				</s:SWFLoader>
			</s:Group>
			<s:Group right="0" top="0" bottom="0" width="194">
				<s:Label y="0" left="0" height="23" text="Width" verticalAlign="middle"/>
				<s:Label x="0" y="31" height="23" text="Height" verticalAlign="middle"/>
				<s:Label x="0" y="62" height="23" text="FrameRate" verticalAlign="middle"/>
				<s:Label x="0" y="93" height="23" text="Transform" verticalAlign="middle"/>
				<s:Label x="0" y="124" height="23" text="Quality" verticalAlign="middle"/>
				<s:Label x="0" y="155" height="23" text="Stroke({strokeWidth})" verticalAlign="middle"/>
				<s:TextInput id="txt_width" y="0" right="0" width="120"/>
				<s:TextInput id="txt_height" y="31" right="0" width="120"/>
				<s:TextInput id="txt_fps" y="62" right="0" width="120"/>
				<s:TextInput id="txt_transColor" y="93" right="0" width="120" text="0xFFFEFD"/>
				<s:HSlider id="quality" y="130" right="0" width="120" maximum="100" minimum="1"
						   stepSize="1" value="1"/>
				<s:HSlider id="stroke" y="160" right="0" width="120" maximum="10" minimum="0"
						   stepSize="1" value="@{strokeWidth}"/>
				<s:CheckBox id="fastMode" left="0" bottom="0" label="Fast Mode" selected="true"/>
			</s:Group>
			
		</s:Group>
		<s:Group left="10" right="10" bottom="0" height="5">
			<s:SWFLoader id="swf_expoter" x="0" y="0" complete="swf_completeExport(event)"
						 scaleContent="false">
				<s:filters>
					<s:GlowFilter color="0xFFFFFF" blurX="{strokeWidth}" blurY="{strokeWidth}" alpha="1" strength="255" />
				</s:filters>
			</s:SWFLoader>
		</s:Group>
	</s:Group>
</s:WindowedApplication>
